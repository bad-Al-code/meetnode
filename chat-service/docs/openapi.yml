openapi: 3.0.3
info:
  title: MeetNote Chat Service API
  version: '1.0.0'
  description: API for managing real-time chat conversations and messages in the MeetNote platform.
  contact:
    name: MeetNote Support
    email: meetnote@support.com

servers:
  - url: http://localhost:3001/api/v1
    description: Local development server

tags:
  - name: Chat
    description: Operations related to chat conversations and messages

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token required for authentication. Obtain token from Auth service.

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: array
          minItems: 2
          maxItems: 2
          items:
            oneOf:
              - type: integer
                example: 400
              - type: string
                example: 'Validation failed: [body.participantUserId]: Invalid UUID format'
      required:
        - error
      description: Standard error format `[statusCode, message]`.

    UUID:
      type: string
      format: uuid
      description: Standard UUID format.
      example: 'a1b2c3d4-e5f6-7890-1234-567890abcdef'

    Conversation:
      type: object
      properties:
        conversationId:
          $ref: '#/components/schemas/UUID'
        type:
          type: string
          enum: [DIRECT, GROUP]
          default: DIRECT
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - conversationId
        - type
        - createdAt
        - updatedAt

    Message:
      type: object
      properties:
        messageId:
          $ref: '#/components/schemas/UUID'
        conversationId:
          $ref: '#/components/schemas/UUID'
        senderUserId:
          $ref: '#/components/schemas/UUID'
        contentType:
          type: string
          enum: [TEXT, IMAGE, FILE, SYSTEM]
          default: TEXT
        content:
          type: string
          description: Message content (or URL for IMAGE/FILE types).
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        deletedAt:
          type: string
          format: date-time
          nullable: true
      required:
        - messageId
        - conversationId
        - senderUserId
        - contentType
        - content
        - createdAt

    ConversationListItem:
      type: object
      properties:
        conversationId:
          $ref: '#/components/schemas/UUID'
        type:
          type: string
          enum: [DIRECT, GROUP]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastMessage:
          $ref: '#/components/schemas/Message'
          nullable: true
          description: The most recent message in the conversation.
        unreadCount:
          type: integer
          format: int32
          minimum: 0
          description: Number of messages unread by the current user.
      required:
        - conversationId
        - type
        - createdAt
        - updatedAt
        - lastMessage
        - unreadCount

    CreateConversationRequest:
      type: object
      properties:
        participantUserId:
          $ref: '#/components/schemas/UUID'
          description: The user ID of the other participant for a direct message.
        initialMessageContent:
          type: string
          maxLength: 5000
          description: Optional initial text message to send.
      required:
        - participantUserId

    MarkReadRequest:
      type: object
      properties:
        lastReadTimestamp:
          type: string
          format: date-time
          description: Optional timestamp (ISO 8601) to mark messages up to. Defaults to current time if omitted or body is empty.

    MarkReadResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        lastReadTimestamp:
          type: string
          format: date-time
          description: The timestamp that was set as the last read time.
      required:
        - success
        - lastReadTimestamp

security:
  - bearerAuth: []

paths:
  /chat/conversations:
    get:
      tags:
        - Chat
      summary: List user's conversations
      description: Retrieves a list of conversations the authenticated user is a participant in, ordered by last activity, including the last message and unread count.
      operationId: getConversations
      responses:
        '200':
          description: Successfully retrieved conversations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationListItem'
        '401':
          description: Unauthorized (Missing or invalid JWT token).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Chat
      summary: Create or find a direct conversation
      description: Creates a new direct (1-on-1) conversation with the specified participant user ID. If a direct conversation already exists between the two users, the existing conversation is returned. Can optionally include an initial message.
      operationId: createOrFindConversation
      requestBody:
        description: User ID of the participant to start a conversation with.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
      responses:
        '201':
          description: Successfully created a *new* conversation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '200':
          description: Successfully found an *existing* conversation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: Bad Request (e.g., trying to create conversation with oneself).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Missing or invalid JWT token).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (Validation failed - e.g., invalid UUID format, missing fields).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat/conversations/{conversationId}/messages:
    get:
      tags:
        - Chat
      summary: Get conversation messages
      description: Retrieves messages for a specific conversation with cursor-based pagination (most recent first within the fetched page, but API returns oldest-first in array). Requires the user to be a participant.
      operationId: getMessages
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The UUID of the conversation.
          schema:
            $ref: '#/components/schemas/UUID'
        - name: limit
          in: query
          required: false
          description: Maximum number of messages to return per page.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 50
        - name: before
          in: query
          required: false
          description: ISO 8601 timestamp cursor. Fetches messages created strictly *before* this timestamp.
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successfully retrieved messages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (User is not a participant in the conversation).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (Validation failed - e.g., invalid UUID or query param format).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat/conversations/{conversationId}/read:
    post:
      tags:
        - Chat
      summary: Mark conversation as read
      description: Updates the `lastReadTimestamp` for the authenticated user in the specified conversation. Marks messages up to the current time if no timestamp is provided in the body.
      operationId: markConversationAsRead
      parameters:
        - name: conversationId
          in: path
          required: true
          description: The UUID of the conversation.
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        description: Optional timestamp to mark messages up to. Send empty body `{}` or omit body to mark up to 'now'.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkReadRequest'
      responses:
        '200':
          description: Successfully marked conversation as read (or timestamp was already up-to-date).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarkReadResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (User is not a participant).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (Validation failed - e.g., invalid UUID format or invalid timestamp in body).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
